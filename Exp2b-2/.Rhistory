)
#####----------Experiment 1a Data Cleaning----------#####
## delete rows for instructions
combined_df <- combined_df[is.na(combined_df$instr_Loop.thisRepN),]
## delete rows for between-block slides
combined_df <- combined_df[is.na(combined_df$selectBlock.thisRepN),]
#delete practice trials
combined_df <- combined_df[str_count(combined_df$stim1, "practice")==0,]
#add subject number
subject <- NULL
for (i in seq(1:20)){
subject =append(subject,rep(i,192))
}
#add 3D and connectivity info
combined_df$dimensionality <- recode(str_count(combined_df$stim1, "Cube"),'1'='3D','0'='2D')
combined_df$connected <- recode(str_count(combined_df$stim1, "6u_s_(.)_s")+str_count(combined_df$stim1, "6u_s_(..)_s"),'1'='dc','0'='c')
#select useful fields
combined_df <- combined_df%>%
mutate(subject = subject)%>%
select(subject,age,sex..female.male.,order,struc_judge_respond.corr,struc_judge_respond.rt,dual_respond.corr,dual_respond.rt,trials.thisTrialN,trials.thisIndex,stim1,stim2,isAnyChange,connected,dimensionality)
v_perf <- aggregate(combined_df$dual_respond.corr,
list(subject=combined_df$subject),
mean)
names(v_perf) [2] <- "VerbTaskAcc"
View(v_perf)
names(combined_df)
Exp2_cdt <- aggregate(combined_df$accuracy,
list(subject=combined_df$subject,
dim = combined_df$dimensionality,
conn = combined_df$connected,
change=combined_df$isAnyChange),
mean)
Exp2_cdt <- aggregate(combined_df$struc_judge_respond.corr,
list(subject=combined_df$subject,
dim = combined_df$dimensionality,
conn = combined_df$connected,
change=combined_df$isAnyChange),
mean)
names(Exp2_cdt)[5] <- "acc"
View(Exp2_cdt)
v_perf <- v_perf[v_perf$VerbTaskAcc>=0.8,]
## read csv files
csv_files_ls = list.files(path=getwd(), pattern = "*.csv")
csv_files_df <- lapply(csv_files_ls,
function(x)
{
tmp <- try(read.csv(
file = x,
header = TRUE))
if (!inherits(tmp,
'try-error'))
tmp
}
)
## combine all txt files together
combined_df <- do.call("rbind",
lapply(csv_files_df,
as.data.frame)
)
#####----------Experiment 1a Data Cleaning----------#####
## delete rows for instructions
combined_df <- combined_df[is.na(combined_df$instr_Loop.thisRepN),]
## delete rows for between-block slides
combined_df <- combined_df[is.na(combined_df$selectBlock.thisRepN),]
#delete practice trials
combined_df <- combined_df[str_count(combined_df$stim1, "practice")==0,]
#add subject number
subject <- NULL
for (i in seq(1:20)){
subject =append(subject,rep(i,192))
}
#add 3D and connectivity info
combined_df$dimensionality <- recode(str_count(combined_df$stim1, "Cube"),'1'='3D','0'='2D')
combined_df$connected <- recode(str_count(combined_df$stim1, "6u_s_(.)_s")+str_count(combined_df$stim1, "6u_s_(..)_s"),'1'='dc','0'='c')
#select useful fields
combined_df <- combined_df%>%
mutate(subject = subject)%>%
select(subject,age,sex..female.male.,order,struc_judge_respond.corr,struc_judge_respond.rt,dual_respond.corr,dual_respond.rt,trials.thisTrialN,trials.thisIndex,stim1,stim2,isAnyChange,connected,dimensionality)
## performance on the concurrent verbal task:
v_perf <- aggregate(combined_df$dual_respond.corr,
list(subject=combined_df$subject),
mean)
names(v_perf) [2] <- "VerbTaskAcc"
## performance on the change detection task:
Exp2_cdt <- aggregate(combined_df$struc_judge_respond.corr,
list(subject=combined_df$subject,
dim = combined_df$dimensionality,
conn = combined_df$connected,
change=combined_df$isAnyChange),
mean)
names(Exp2_cdt)[5] <- "acc"
## poor performance in the concurrent verbal task
v_perf <- v_perf[v_perf$VerbTaskAcc>=0.8,]
## read csv files
csv_files_ls = list.files(path=getwd(), pattern = "*.csv")
csv_files_df <- lapply(csv_files_ls,
function(x)
{
tmp <- try(read.csv(
file = x,
header = TRUE))
if (!inherits(tmp,
'try-error'))
tmp
}
)
## combine all txt files together
combined_df <- do.call("rbind",
lapply(csv_files_df,
as.data.frame)
)
#####----------Experiment 1a Data Cleaning----------#####
## delete rows for instructions
combined_df <- combined_df[is.na(combined_df$instr_Loop.thisRepN),]
## delete rows for between-block slides
combined_df <- combined_df[is.na(combined_df$selectBlock.thisRepN),]
#delete practice trials
combined_df <- combined_df[str_count(combined_df$stim1, "practice")==0,]
View(combined_df)
## read csv files
csv_files_ls = list.files(path=getwd(), pattern = "*.csv")
csv_files_df <- lapply(csv_files_ls,
function(x)
{
tmp <- try(read.csv(
file = x,
header = TRUE))
if (!inherits(tmp,
'try-error'))
tmp
}
)
## combine all txt files together
combined_df <- do.call("rbind",
lapply(csv_files_df,
as.data.frame)
)
View(combined_df)
View(combined_df)
combined_df <- combined_df[is.na(combined_df$instr_Loop.thisRepN),]
View(combined_df)
combined_df <- combined_df[is.na(combined_df$selectBlock.thisRepN),]
combined_df <- combined_df[str_count(combined_df$stim1, "practice")==0,]
View(combined_df)
3648/192
## read csv files
csv_files_ls = list.files(path=getwd(), pattern = "*.csv")
csv_files_df <- lapply(csv_files_ls,
function(x)
{
tmp <- try(read.csv(
file = x,
header = TRUE))
if (!inherits(tmp,
'try-error'))
tmp
}
)
## combine all txt files together
combined_df <- do.call("rbind",
lapply(csv_files_df,
as.data.frame)
)
#####----------Experiment 1a Data Cleaning----------#####
## delete rows for instructions
combined_df <- combined_df[is.na(combined_df$instr_Loop.thisRepN),]
## delete rows for between-block slides
combined_df <- combined_df[is.na(combined_df$selectBlock.thisRepN),]
#delete practice trials
combined_df <- combined_df[str_count(combined_df$stim1, "practice")==0,]
## read csv files
csv_files_ls = list.files(path=getwd(), pattern = "*.csv")
csv_files_df <- lapply(csv_files_ls,
function(x)
{
tmp <- try(read.csv(
file = x,
header = TRUE))
if (!inherits(tmp,
'try-error'))
tmp
}
)
## combine all txt files together
combined_df <- do.call("rbind",
lapply(csv_files_df,
as.data.frame)
)
#####----------Experiment 1a Data Cleaning----------#####
## delete rows for instructions
combined_df <- combined_df[is.na(combined_df$instr_Loop.thisRepN),]
## delete rows for between-block slides
combined_df <- combined_df[is.na(combined_df$selectBlock.thisRepN),]
#delete practice trials
combined_df <- combined_df[str_count(combined_df$stim1, "practice")==0,]
subject <- NULL
for (i in seq(1:6)){
subject =append(subject,rep(i,192))
}
#add 3D and connectivity info
combined_df$dimensionality <- recode(str_count(combined_df$stim1, "Cube"),'1'='3D','0'='2D')
combined_df$connected <- recode(str_count(combined_df$stim1, "6u_s_(.)_s")+str_count(combined_df$stim1, "6u_s_(..)_s"),'1'='dc','0'='c')
#select useful fields
combined_df <- combined_df%>%
mutate(subject = subject)%>%
select(subject,age,sex..female.male.,order,struc_judge_respond.corr,struc_judge_respond.rt,dual_respond.corr,dual_respond.rt,trials.thisTrialN,trials.thisIndex,stim1,stim2,isAnyChange,connected,dimensionality)
View(combined_df)
setwd("~/Documents/Research/Forth_Year_Projects/VSWM/PeriPaper/data/Exp2b-2")
combined_df1 <- combined_df
setwd("~/Documents/Research/Forth_Year_Projects/VSWM/PeriPaper/data/Exp2b-2")
## read csv files
csv_files_ls = list.files(path=getwd(), pattern = "*.csv")
csv_files_df <- lapply(csv_files_ls,
function(x)
{
tmp <- try(read.csv(
file = x,
header = TRUE))
if (!inherits(tmp,
'try-error'))
tmp
}
)
## combine all txt files together
combined_df <- do.call("rbind",
lapply(csv_files_df,
as.data.frame)
)
#####----------Experiment 2b-2 Data Cleaning----------#####
## delete rows for instructions
combined_df <- combined_df[is.na(combined_df$instr_Loop.thisRepN),]
## delete rows for between-block slides
combined_df <- combined_df[is.na(combined_df$selectBlock.thisRepN),]
#delete practice trials
combined_df <- combined_df[str_count(combined_df$stim1, "practice")==0,]
subject <- NULL
for (i in seq(7:25)){
subject =append(subject,rep(i,192))
}
#add 3D and connectivity info
combined_df$dimensionality <- recode(str_count(combined_df$stim1, "Cube"),'1'='3D','0'='2D')
combined_df$connected <- recode(str_count(combined_df$stim1, "6u_s_(.)_s")+str_count(combined_df$stim1, "6u_s_(..)_s"),'1'='dc','0'='c')
#select useful fields
combined_df <- combined_df%>%
mutate(subject = subject)%>%
select(subject,age,sex..female.male.,order,struc_judge_respond.corr,struc_judge_respond.rt,dual_respond.corr,dual_respond.rt,trials.thisTrialN,trials.thisIndex,stim1,stim2,isAnyChange,connected,dimensionality)
combined_df <- rbind(combined_df1,combined_df)
4800/192
v_perf <- aggregate(combined_df$dual_respond.corr,
list(subject=combined_df$subject),
mean)
names(v_perf) [2] <- "VerbTaskAcc"
View(combined_df)
unique(combined_df$subject)
seq(7:25)
seq(7,25,1)
## read csv files
csv_files_ls = list.files(path=getwd(), pattern = "*.csv")
csv_files_df <- lapply(csv_files_ls,
function(x)
{
tmp <- try(read.csv(
file = x,
header = TRUE))
if (!inherits(tmp,
'try-error'))
tmp
}
)
## combine all txt files together
combined_df <- do.call("rbind",
lapply(csv_files_df,
as.data.frame)
)
#####----------Experiment 2b-2 Data Cleaning----------#####
## delete rows for instructions
combined_df <- combined_df[is.na(combined_df$instr_Loop.thisRepN),]
## delete rows for between-block slides
combined_df <- combined_df[is.na(combined_df$selectBlock.thisRepN),]
#delete practice trials
combined_df <- combined_df[str_count(combined_df$stim1, "practice")==0,]
#add subject number
subject <- NULL
for (i in seq(7,25,1)){
subject =append(subject,rep(i,192))
}
#add 3D and connectivity info
combined_df$dimensionality <- recode(str_count(combined_df$stim1, "Cube"),'1'='3D','0'='2D')
combined_df$connected <- recode(str_count(combined_df$stim1, "6u_s_(.)_s")+str_count(combined_df$stim1, "6u_s_(..)_s"),'1'='dc','0'='c')
#select useful fields
combined_df <- combined_df%>%
mutate(subject = subject)%>%
select(subject,age,sex..female.male.,order,struc_judge_respond.corr,struc_judge_respond.rt,dual_respond.corr,dual_respond.rt,trials.thisTrialN,trials.thisIndex,stim1,stim2,isAnyChange,connected,dimensionality)
#####----------Experiment 2b All Data Cleaning----------#####
combined_df <- rbind(combined_df1,combined_df)
## performance on the concurrent verbal task:
v_perf <- aggregate(combined_df$dual_respond.corr,
list(subject=combined_df$subject),
mean)
names(v_perf) [2] <- "VerbTaskAcc"
names(combined_df$subject)
names(combined_df)
Exp2_cdt <- aggregate(combined_df$struc_judge_respond.corr,
list(subject=combined_df$subject,
dim = combined_df$dimensionality,
conn = combined_df$connected,
change=combined_df$isAnyChange),
mean)
names(Exp2_cdt)[5] <- "acc"
## poor performance in the concurrent verbal task
v_perf <- v_perf[v_perf$VerbTaskAcc>=0.8,]
## exclude low verb_acc participants
Exp2_cdt <- Exp2_cdt[Exp2_cdt$subject %in% v_perf$subject,]
## exclude participants with low acc in change detection task
c_perf <- aggregate(Exp2_cdt$acc,
list(subject=Exp2_cdt$subject),
mean)
names(c_perf) [2] <- "CDTAcc"
c_perf <- c_perf[c_perf$CDTAcc>0.5,]
Exp2_cdt <- Exp2_cdt[Exp2_cdt$subject %in% c_perf$subject,]
Exp2_cdt <- Exp2_cdt[Exp2_cdt$subject %in% c_perf$subject,]
View(Exp2_cdt)
unique(Exp2_cdt$subject)
length(unique(Exp2_cdt$subject))
ggregate(combined_df$sex..female.male.,
list(subject=combined_df$subject),
count)
aggregate(combined_df$sex..female.male.,
list(subject=combined_df$subject),
count)
combined_df%>%group_by(subject,sex..female.male.)%>%
summarise(
n=n()
)
gender <- combined_df%>%group_by(subject,sex..female.male.)%>%
summarise(
n=n()
)
View(gender)
Exp2_descrp <- Exp2_cdt%>%
group_by(dim,conn,change) %>%
dplyr::summarise(
count = n(),
mean = mean(acc, na.rm = TRUE),
se = sd(acc, na.rm = TRUE)/sqrt(count)
)
View(Exp2_descrp)
e_Exp2_cdt<-
recast(Exp2_cdt,
subject ~ dim + conn + change,
id.var = c("subject", "dim",  "conn", "change"))
names(re_Exp2_cdt) <- c("subject","d2_c_s","d2_c_d","d2_dc_s","d2_dc_d","d3_c_s","d3_c_d","d3_dc_s","d3_dc_d")
Exp2_fh <- re_Exp2_cdt %>%
mutate_at(c("d2_c_s","d2_dc_s",
"d3_c_s","d3_dc_s"),
list(f=~ifelse(.==1,1/48,1-.)))%>%
mutate_at(vars(ends_with('_d')),
list(h=~ifelse(.==1,1-(1/48),ifelse(.==0,1/48,.))))%>%
mutate_at(vars(contains('_f'),contains('_h')),
list(z=~qnorm(.)))
Exp2_fh <- Exp2_fh%>%
mutate(d2.c.dp=d2_c_d_h_z-d2_c_s_f_z)%>%
mutate(d2.dc.dp=d2_dc_d_h_z-d2_dc_s_f_z)%>%
mutate(d3.c.dp=d3_c_d_h_z-d3_c_s_f_z)%>%
mutate(d3.dc.dp=d3_dc_d_h_z-d3_dc_s_f_z)
Exp2_dpr <- Exp2_fh%>%
select(subject,contains('dp'))
## wide to long
Exp2_dpr_long <- reshape(Exp2_dpr,
direction = 'long',
idvar = 'subject',
varying = c(2:5),
timevar='dim',
times=c('squares','cubes'),
v.names=c('connected', 'disconncted'))
Exp2_dpr_long <- gather(Exp2_dpr_long,
connectivity,
dp,
connected:disconncted,
factor_key = T)
Exp2_dpr_long$dim <- as.factor(Exp2_dpr_long$dim)
Exp2_dpr_long$subject <- as.factor(Exp2_dpr_long$subject)
#####--------d' Descriptive Statistics--------#####
Exp2_dpr_summary <- Exp2_dpr_long%>%
group_by(dim, connectivity) %>%
dplyr::summarise(
count = n(),
mean = mean(dp, na.rm = TRUE),
se = sd(dp, na.rm = TRUE)/sqrt(count)
)
re_Exp2_cdt<-
recast(Exp2_cdt,
subject ~ dim + conn + change,
id.var = c("subject", "dim",  "conn", "change"))
names(re_Exp2_cdt) <- c("subject","d2_c_s","d2_c_d","d2_dc_s","d2_dc_d","d3_c_s","d3_c_d","d3_dc_s","d3_dc_d")
Exp2_fh <- re_Exp2_cdt %>%
mutate_at(c("d2_c_s","d2_dc_s",
"d3_c_s","d3_dc_s"),
list(f=~ifelse(.==1,1/48,1-.)))%>%
mutate_at(vars(ends_with('_d')),
list(h=~ifelse(.==1,1-(1/48),ifelse(.==0,1/48,.))))%>%
mutate_at(vars(contains('_f'),contains('_h')),
list(z=~qnorm(.)))
Exp2_fh <- Exp2_fh%>%
mutate(d2.c.dp=d2_c_d_h_z-d2_c_s_f_z)%>%
mutate(d2.dc.dp=d2_dc_d_h_z-d2_dc_s_f_z)%>%
mutate(d3.c.dp=d3_c_d_h_z-d3_c_s_f_z)%>%
mutate(d3.dc.dp=d3_dc_d_h_z-d3_dc_s_f_z)
Exp2_dpr <- Exp2_fh%>%
select(subject,contains('dp'))
## wide to long
Exp2_dpr_long <- reshape(Exp2_dpr,
direction = 'long',
idvar = 'subject',
varying = c(2:5),
timevar='dim',
times=c('squares','cubes'),
v.names=c('connected', 'disconncted'))
Exp2_dpr_long <- gather(Exp2_dpr_long,
connectivity,
dp,
connected:disconncted,
factor_key = T)
Exp2_dpr_long$dim <- as.factor(Exp2_dpr_long$dim)
Exp2_dpr_long$subject <- as.factor(Exp2_dpr_long$subject)
#####--------d' Descriptive Statistics--------#####
Exp2_dpr_summary <- Exp2_dpr_long%>%
group_by(dim, connectivity) %>%
dplyr::summarise(
count = n(),
mean = mean(dp, na.rm = TRUE),
se = sd(dp, na.rm = TRUE)/sqrt(count)
)
## visualization - bar graph with error bars
#jpeg("Exp2a_dpr.jpeg", width = 8, height = 4.5, units = 'in', res = 300)
ggplot(Exp2_dpr_summary,aes(x=connectivity,y=mean,fill = dim))+
geom_bar(stat = "identity",position = position_dodge())+
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=0.5,position=position_dodge(0.9),size=.8,linetype="solid")+
ylim(0,3)+
ylab('d\'')+
scale_fill_manual(values=c('#999999','#E69F00'))+
theme_classic(base_size = 20)+
labs(fill="dimensionality")
Exp2_bias <- Exp2_fh %>%
mutate(d2.c.b=exp(-1*(d2_c_d_h_z^2-d2_c_s_f_z^2)*0.5))%>%
mutate(d2.dc.b=exp(-1*(d2_dc_d_h_z^2-d2_dc_s_f_z^2)*0.5))%>%
mutate(d3.c.b=exp(-1*(d3_c_d_h_z^2-d3_c_s_f_z^2)*0.5))%>%
mutate(d3.dc.b=exp(-1*(d3_dc_d_h_z^2-d3_dc_s_f_z^2)*0.5))%>%
select(subject,contains('b'))
## wide to long
Exp2_bias_long <- reshape(Exp2_bias,
direction = 'long',
idvar = 'subject',
varying = c(2:5),
timevar='dim',
times=c('squares','cubes'),
v.names=c('c','dc'))
Exp2_bias_long <- gather(Exp2_bias_long,
conn,
bias,
c:dc,
factor_key = T)
Exp2_bias_long$subject <- as.factor(Exp2_bias_long$subject)
#####----------Bias Descriptive Statistics----------#####
indivi_bias <- Exp2_bias_long%>%
group_by(subject) %>%
dplyr::summarise(
mean = mean(bias, na.rm = TRUE),
)
t.test(indivi_bias$mean,mu=1)
Exp2_k <- Exp2_fh %>%
mutate(d2.c.k=6*(d2_c_d_h-d2_c_s_f)/(1-d2_c_s_f))%>%
mutate(d2.dc.k=6*(d2_dc_d_h-d2_dc_s_f)/(1-d2_dc_s_f))%>%
mutate(d3.c.k=6*(d3_c_d_h-d3_c_s_f)/(1-d3_c_s_f))%>%
mutate(d3.dc.k=6*(d3_dc_d_h-d3_dc_s_f)/(1-d3_dc_s_f))%>%
select(subject,contains('k'))
## wide to long
Exp2_k_long <- reshape(Exp2_k,
direction = 'long',
idvar = 'subject',
varying = c(2:5),
timevar='dim',
times=c('squares','cubes'),
v.names=c('c','dc'))
Exp2_k_long <- gather(Exp2_k_long,
conn,
k,
c:dc,
factor_key = T)
Exp2_k_long$subject <- as.factor(Exp2_k_long$subject)
#####----------Capacity Descriptive Statistics----------#####
indivi_k <- Exp2_k_long%>%
group_by(subject) %>%
dplyr::summarise(
mean = mean(k, na.rm = TRUE),
)
t.test(indivi_k$mean)
Exp2_k_summary <- Exp2_k_long%>%
group_by(dim, conn) %>%
dplyr::summarise(
count = n(),
mean = mean(k, na.rm = TRUE),
se = sd(k, na.rm = TRUE)/sqrt(count)
)
View(Exp2_k_summary)
aov2 <- aov(dp~dim*connectivity+Error(subject),data=Exp2_dpr_long)
summary(aov2)
eta_squared(aov2)
tapply(Exp2_dpr_long$dp, Exp2_dpr_long$dim, mean)
tapply(Exp2_dpr_long$dp, list(Exp2_dpr_long$dim,Exp2_dpr_long$connectivity), mean)
t.test(indivi_k$mean)
sd(indivi_k$mean)/sqrt(length(indivi_k$mean))
